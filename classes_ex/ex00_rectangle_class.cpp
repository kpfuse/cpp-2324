#include <iostream>
#include <string>
using namespace std;

class Rectangle {
  private:
    double a;
    double b;

  public:
    void read_rectangle() {
        cout << "side a = "; cin >> a;
        cout << "side b = "; cin >> b;
    }

    double area() {
        return a * b;
    }
    double perimeter() {
        return 2.0 * (a + b);
    }

    double get_a() const {
        return a;
    }

    void set_a(double a) {
       this->a = a;
    }
    
    double get_b() const {
       return b;
    }

    void set_b(double b) {
       this->b = b;
    }
    
    //Rectangle(double a, double b)  
    //{
    //    this->a = a;
    //    this->b = b;
    //    cout << "Первый конструктор отработал; был создан новый прямоугольник\n"; // это здесь для наглядности вызова+ конструктора; обычно такое конечно не пишут
    //}
    
    //// конструктор по умолчанию генерируется автоматические, если нет други конструкторов
    //// иначе - его надо сделать самостоятельно
    //Rectangle() 
    //{
    //    this->a = 0;
    //    this->b = 0;
    //    cout << "Второй конструктор (по умолчанию) отработал \n"; // это здесь для наглядности вызова+ конструктора; обычно такое конечно не пишут
    //}

    // вместо явного присваивания можно использовать секцию инициализации сразу после заголовка конструктора
    // Rectangle(double a_param, double b) : a(a_param), b(b)  
    Rectangle(double a_param, double b) : a{ a_param }, b{ b }  
    {
       cout << "Первый конструктор отработал; был создан новый прямоугольник\n"; // это здесь для наглядности вызова конструктора; обычно такое конечно не пишут
    }

    //// если надо контролировать допустимые значения для полей, то можно явно написать их проверки в теле конструктора 
    //// или вызвать сеттеры
    //Rectangle(double a, double b)  
    //{
    //    set_a(a);
    //    set_b(b);
    //    cout << "Первый конструктор отработал; был создан новый прямоугольник\n"; // это здесь для наглядности вызова конструктора; обычно такое конечно не пишут
    //}

    //// констуктор с параметрами по умолчанию может заменить сразу несколько конструкторов; 
    //// например, здесь конструктор по умолчанию стал не нужен
    //Rectangle(double a = 0, double b = 0)  
    //{
    //    set_a(a);
    //    set_b(b);
    //}

    // конструктор по умолчанию делегирует работу первому конструктору
    Rectangle() : Rectangle{0, 0} { 
       cout << "Второй конструктор (по умолчанию) отработал, он делегировал свою работу первому \n"; // это здесь для наглядности вызова+ конструктора; обычно такое конечно не пишут
    }

    // еще конструктор: сделает квадрат - прямоугольник со сторонами а
    Rectangle(double a) : a{ a }, b{ b } {}
    //// или то же самое с делегированием конструктора
    //Rectangle(double a) : Rectangle(a, a) {}
    
    
    //// конструктор копирования генерируется автоматически; для полей простых типов этого достаточно, писать его самостоятельно не надо
    //// но если класс включает динамические поля, 
    //// то такой  конструктор надо обязательно написать и выделить в нем память для динамических полей в новом объекте
    //Rectangle(const Rectangle& r) // 1 способ
    //{
    //    this->a = r.a;
    //    this->b = r.b;
    //}
    //Rectangle(const Rectangle& r) : a{ r.a }, b{ r.b } { } // 2 способ
    //Rectangle(const Rectangle& r) : Rectangle{ r.a, r.b } {}// 3 способ

};

int main() {

    Rectangle rect; // вызов конструктора по умолчанию
    // rect.a = 3.0; // эти поля приватные
    // rect.b = 4.0; // здесь они не доступны
    // доступны вызовы открытых методов
    rect.set_a(3.0);
    rect.set_b(4.0);
    cout << "s = " << rect.area() << endl;
    rect.read_rectangle();
    cout << "s = " << rect.area() << endl;
    

    // вызовы разных других конструкторов
    Rectangle r1{4.0, 5.0}; // конструктор с двумя параметрами

    Rectangle r2(2.0, -3.0);
    Rectangle r3 = Rectangle(2.0, -3.0);
    r1 = Rectangle(-5.0, 1.0);

    Rectangle r4(50); // конструктор с одним double-параметром
    Rectangle r5(r2); // конструктор копирования

    return 0;
}